CONSTRUCT {
    ?taxonUri a dwc:Taxon;

        dwc:scientificNameAuthorship ?authorname;
        dwc:scientificName           ?scientificname;
        dwc:acceptedNameUsage        ?referenceScientificName;

        dwc:kingdom                  ?kingdom;
        dwc:phylum                   ?phylum;
        dwc:class                    ?class;
        dwc:order                    ?order;
        dwc:family                   ?family;
        dwc:genus                    ?genus;

        taxrefp:hasRank              ?rankUri;
        schema:sameAs                ?page;
        dwc:parentNameUsageID        ?parentID;
        skos:broader                 ?parentTaxon;
		.
}
WHERE {
    ?content
        api:key             ?id;
        api:authorship      ?author;
	    api:canonicalName   ?scientificname;
        api:scientificName  ?fullname.
        
    OPTIONAL { ?content api:accepted        ?refSN }
    OPTIONAL { ?content api:taxonomicStatus ?status }
    OPTIONAL { ?content api:kingdom         ?kingdom }
    OPTIONAL { ?content api:phylum          ?phylum }
    OPTIONAL { ?content api:order           ?order }
    OPTIONAL { ?content api:family          ?family }
    OPTIONAL { ?content api:genus           ?genus}
    OPTIONAL { ?content api:rank            ?rankName }
    OPTIONAL { ?content api:class           ?class }
    OPTIONAL { ?content api:parentKey       ?parentID }

    bind (IRI(concat("https://www.gbif.org/species/", ?id)) AS ?page)
    #if the taxon is accepted the reference name is the name of that taxon
    bind (IF(?status = "ACCEPTED", ?fullname, ?refSN) AS ?referenceScientificName)

    bind (sms:formatAuthorName(?author) AS ?authorname)
    bind (IRI(concat("http://example.org/ld/gbif/taxon/", ?id)) AS ?taxonUri)
    bind (IRI(concat("http://example.org/ld/gbif/taxon/", ?parentID)) AS ?parentTaxon)
    bind (IRI(concat("http://taxref.mnhn.fr/lod/taxrank/", sms:getTaxrefRankName(?rankName))) AS ?rankUri)	
}

# Translate the GBIF rank name into the corresponding TAXREF-LD name.
# The ranks in GBIF that do not exist in TAXREF-LD will still be translated into URIs 
# following the Camel-case convention. This applies to: 
# SUPERLEGION, SUBLEGION, INFRALEGION, SUPERCOHORT, SUBCOHORT, INFRACOHORT, MAGNORDER, GRANDORDER, 
# INFRAFAMILY, INFRATRIBE, SUPRAGENERIC_NAME, INFRAGENUS, INFRAGENERIC_NAME, INFRASPECIFIC_NAME,
# CONVARIETY, INFRASUBSPECIFIC_NAME, PROLES, GREX, PATHOVAR, BIOVAR, CHEMOVAR, MORPHOVAR, PHAGOVAR,
# SEROVAR, CHEMOFORM, FORMA_SPECIALIS, CULTIVAR_GROUP, STRAIN, OTHER, UNRANKED
function sms:getTaxrefRankName(?rankName) {
    if      (?name = "LEGION")              { return("Legio") }
    else if (?name = "SPECIES_AGGREGATE")   { return("Aggregate") }
    else if (?name = "ABERRATION")          { return("Abberatio") }
    else if (?name = "MORPH")               { return("Morpha") }
    else if (?name = "FORM")                { return("Forma") }
    else if (?name = "SUBFORM")             { return("SubForma") }
    else if (?name = "VARIETY")             { return("Varietas") }
    else if (?name = "SUBVARIETY")          { return("SubVarietas") }

    # Transform "SUBABCD..." into "SubAbc", then same thing for Super, Infra and Parv
    else if (strstarts(?rkName, "SUB")) {
        let (?after = strafter(?rkName, "SUB")) {
            return(concat("Sub", substr(?after, 1, 1), lcase(substr(?after, 2))))
        }
    }
    else if (strstarts(?rkName, "SUPER")) {
        let (?after = strafter(?rkName, "SUPER")) {
            return(concat("Super", substr(?after, 1, 1), lcase(substr(?after, 2))))
        }
    }
    else if (strstarts(?rkName, "INFRA")) {
        let (?after = strafter(?rkName, "INFRA")) {
            return(concat("Infra", substr(?after, 1, 1), lcase(substr(?after, 2))))
        }
    }
    else if (strstarts(?rkName, "PARV")) {
        let (?after = strafter(?rkName, "PARV")) {
            return(concat("Parv", substr(?after, 1, 1), lcase(substr(?after, 2))))
        }
    }
    else { return(substr(?after, 1, 1), lcase(substr(?after, 2))) }
}

# Format author name removing extra spaces at beginning and end of the name and after a dot
# and moving basionymName (in round brackets at the end of the name) to the beginning of the name (like in TAXREF)
# " (Bloch, 1782)" => "(Bloch, 1782)";
# "A. Gray" => "A.Gray"
# "E.Mey., 1839 (L.)" => "(L.) E.Mey., 1839"
function sms:formatAuthorName(?author) {
    LET (?basionym = IF(regex(?author, "\\(.*\\)$"), replace(?author, "^.*(\\(.*\\))$", "$1"), "")) {
        LET (?author = concat(?basionym , " ", replace(?author, "\\(.*\\)$", ""))) {
            replace(replace(?author, "(\\. )", "."), "(^ *)|( *$)", "")
        }
    }
}
